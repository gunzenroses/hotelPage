mixin donut-chart({ excellentNum = 0, goodNum  = 0, satisfiedNum  = 0, disappointedNum  = 0 })
  - 
    const { 
      donutMarks, 
      donutColors } = require('Components/donut-chart/donut-chart.json');

    const totalData = 
      parseFloat(excellentNum) +
      parseFloat(goodNum) +
      parseFloat(satisfiedNum) + 
      parseFloat(disappointedNum);
    const disappointedPercent = disappointedNum / totalData * 100;
    const satisfiedPercent = satisfiedNum / totalData * 100;
    const goodPercent = goodNum / totalData * 100;
    const excellentPercent = excellentNum / totalData * 100;

    const donutData = { 
      disappointed: {
        number: disappointedNum,
        percent: disappointedPercent
      }, 
      satisfied: {
        number: satisfiedNum,
        percent: satisfiedPercent
      }, 
      good: {
        number: goodNum,
        percent: goodPercent
      }, 
      excellent: {
        number: excellentNum,
        percent: excellentPercent
      }
    };

    let counter = 1;
    let dashOffsetValue = parseFloat(25 - 0.5);

  figure.donut-chart.js-donut-chart
    .donut-chart__content
      svg.donut-chart__img(
        width = '100%' 
        height = '100%' 
        viewbox = '0 0 33 33' 
        aria-labelledby = 'impression-title' 
        role = 'img')
        defs
          each donutColor in donutColors 
            each val, key in donutColor
              - 
                const { start, end } = val; 
                const gradientInfo = key === 'excellent' | key === 'satisfied'
                  ? 'rotate(90)'
                  : '';
              lineargradient(id= `gradient_${ 
                key }` gradientTransform = gradientInfo)
                stop(stop-color = start offset = '0%')
                stop(stop-color = end offset = '100%')
        title#impression-title Впечатления от номера

        circle.donut-chart__ring(
          cx = '50%' cy = '50%' 
          r = '15.91549430918954'
          role = 'presentation' 
          )
        each data, mark in donutData
          - 
            const { number, percent } = data;

            const dashValue = percent > 2
              ? parseInt(percent - 1)
              : 0;

            const dashLeft = 100 - dashValue;
          circle(
            class = `donut-chart__segment js-donut-chart__segment_${ mark }`
            data-circle-number = number
            data-circle-modifier = mark
            cx = '50%' cy = '50%' 
            r = '15.91549430918954'
            stroke = `url(#gradient_${ mark })`
            stroke-dasharray = `${ dashValue } ${ dashLeft }` 
            stroke-dashoffset = dashOffsetValue
            aria-labelledby = `donut-chart__segment_${ mark }`)
          title(
            class = `donut-chart__title_${ mark }`
            id = `donut-chart__segment_${ mark }`)!= percent
          - dashOffsetValue -= percent;
      .donut-chart__text.js-donut-chart__text
        p(
          class = 'donut-chart__number js-donut-chart__number'
          data-total-number = totalData
          )= totalData
        p.donut-chart__label.js-donut-chart__label голосов

    figcaption.donut-chart__caption
      ul.donut-chart__key-list(aria-hidden = 'true' role = 'presentation')
        each val, key in donutMarks
          li(
            class = `donut-chart__key-item js-donut-chart__key-item_${ key }`
            data-circle-modifier = key
            )
            span(class = `donut-chart__marker donut-chart__marker_${ key }`)
            != val


